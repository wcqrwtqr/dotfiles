=Flask framework=


Do the migration 

{{{bash
export FLASK_AP=basic.py 
# or
FLASK_AP=basic.py 

flask db init
flask db migrate -m 'Add message'
flask df upgrade

}}}

==Creating the main page for class db and views==
Setting up the main page in flask

{{{python

import os
from flask import Flask, render_template, url_for, request, redirect
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate

app = Flask(__name__)

basedir = os.path.abspath(os.path.dirname(__file__))

app.config['SECRET_KEY'] = 'My top secret'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///' + os.path.join(basedir, 'data.sqlite')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)
Migrate(app,db)

class Puppy(db.Model):
    __tablename__= 'puppies'
    id=db.Column(db.Integer, primary_key=True)
    name = db.Column(db.Text)


    def __init__(self):
        self.name=name

    def __repr__(self):
        return  f'Puppy name: {self.name}'

    # views

@app.route('/')
def index():
    return render_template(index.html)


@app.route('/add', methods=['GET', 'POST'])
def add_pup():
    form=AddForm()
    if form.is_valid():
        name = form.name.data
        new_puppy = Puppy(name)
        db.session.add(new_puppy)
        db.session.commit()
        return redirect(url_for('list_pup'))
    return render_template('add.html', form=form)


@app.route('/list')
def list_pup():
    puppies = Puppy.query.all()
    return render_template('list_pup.html', puppies=puppies)


@app.route('/delete', methods=['GET', 'POST'])
def delete_pup():
    form=DeleteForm()
    if form.is_valid():
        id = form.id.data
        pup = Puppy.query.get(id)
        db.session.delete(pup)
        db.session.commit()
        return redirect(url_for('list_pup'))
    return render_template('delete.html' form=form)




if __name__=='__main__':
    app.run(debug=True)



}}}



==Creating a form.py ==
{{{python
from flask_wtf import FlaskForm
from wtforms import  StringField, IntegerField, SubmitField

class AddForm(FlaskForm):
    name = StringField('Name of Puppy')
    submit = SubmitField('Add Puppy')

class DeleteForm(FlaskForm):
    id = IntegerField('ID number of puppy to remove')
    submit = SubmitField('Remove Puppy')

}}}



====Creating a db with relationship====
{{{python

#######
from flask import Flask,request, render_template
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import  Migrate
import os

basedir = os.path.abspath(os.path.dirname(__file__))
app = Flask(__name__)
app.config['SECRET_KEY'] = 'My top secret'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///' + os.path.join(basdir, 'data.sqlite')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)
Migrate(app,db)


class Puppy(db.Model):
    __tablename__='puppies'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String)
    age = db.Column(db.Integer)
    breed = db.Column(db.Text)

    def __init__(self,name, age, breed):
        self.name = name
        self.age = age
        self.breed=breed

def index():
    return render_template(index.html)


if __name__ == '__main__':
    app.run(debug=True)

}}}



# issue for the auth documentation
{{{python

def check_email(self,field):
	if User.query.filter_by(email=field.data).first():
		raise ValidationError('Your email has been registered already!')

def check_username(self,field):
	if User.query.filter_by(username=field.data).first():
		raise ValidationError('Your username has been registered already!')
How should they be for the reg_form



def validate_email(self, email):
	if User.query.filter_by(email=self.email.data).first():
		raise ValidationError('Email has been registered')
def validate_username(self, username):
	if User.query.filter_by(username=self.username.data).first():
		raise ValidationError('Username has been registered')
# How should they be for the update_user_form



def validate_email(self, email):
	if email.data != current_user.email:
		if User.query.filter_by(email=email.data).first():
			raise ValidationError('Email has been registered')
def validate_username(self, username):
	if username.data != current_user.username:
		if User.query.filter_by(username=username.data).first():
			raise ValidationError('Username has been registered')
}}}

